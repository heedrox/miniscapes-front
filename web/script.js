class Terminal {
    constructor() {
        this.output = document.getElementById('terminalOutput');
        this.input = document.getElementById('terminalInput');
        this.commandHistory = [];
        this.historyIndex = -1;
        this.autoScroll = true; // Control para auto-scroll
        
        // Panel de archivos
        this.filesPanel = document.getElementById('filesPanel');
        this.filesTab = document.getElementById('filesTab');
        this.filesContent = document.getElementById('filesContent');
        this.closePanel = document.getElementById('closePanel');
        
        // Verificar acceso v√°lido antes de configurar
        if (!config.isValidAccess) {
            this.showAccessError();
            return;
        }
        
        // Limpiar zona de archivos al inicializar
        this.clearFilesPanel();
        
        // Configurar dron
        this.setupDrone();
        
        // Limpiar output para preparar la carga del historial
        this.output.innerHTML = '';
        
        this.init();
    }
    
    init() {
        // Verificar acceso v√°lido antes de inicializar
        if (!config.isValidAccess) {
            this.showAccessError();
            return;
        }
        
        this.input.addEventListener('keydown', (e) => this.handleKeyDown(e));
        this.input.addEventListener('input', () => this.updateCursorPosition());
        this.input.addEventListener('click', () => this.updateCursorPosition());
        this.input.addEventListener('keyup', () => this.updateCursorPosition());
        this.input.addEventListener('focus', () => this.updateCursorPosition());
        this.input.focus();
        
        // Habilitar scroll manual
        this.enableManualScroll();
        
        // Auto-scroll al final
        this.scrollToBottom();
        
        // Crear cursor personalizado
        this.createCustomCursor();
        
        // Inicializar panel de archivos
        this.initFilesPanel();
        
        // Actualizar posici√≥n del cursor cuando se redimensiona la ventana
        window.addEventListener('resize', () => this.updateCursorPosition());
        
        // Cargar historial inicial
        this.loadInitialHistory();
    }
    
    async loadInitialHistory() {
        try {
            // Construir URL con par√°metros para GET
            const params = new URLSearchParams({
                drone: 'johnson' // Siempre usar Johnson
            });
            
            // Agregar c√≥digo de partida si est√° disponible (mantiene compatibilidad)
            if (config.currentPartidaCode) {
                params.append('code', config.currentPartidaCode);
            }
            
            // Agregar versi√≥n (c√≥digo de acceso) si est√° disponible
            if (config.currentCode) {
                params.append('version', config.currentCode);
            }
            
            const url = `${config.INIT_API_URL}?${params.toString()}`;
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            // Mostrar mensaje de conexi√≥n
            this.addOutputLine(`Conectando a dron@johnson...`, 'text');
            this.addOutputLine('', 'text');
            
            // Mostrar mensajes del historial como si fueran normales
            if (data.messages && Array.isArray(data.messages)) {
                data.messages.forEach(messageObj => {
                    // Extraer el contenido del mensaje seg√∫n su estructura
                    if (messageObj.user === 'player') {
                        // Mensaje del usuario
                        this.addOutputLine(`$ ${messageObj.message}`, 'command-executed');
                    } else if (messageObj.user === 'drone') {
                        // Mensaje del dron
                        this.addOutputLine(`üöÅ Dron Johnson:`, 'drone-response');
                        this.addOutputLine(messageObj.message, 'drone-message');
                        
                        // Mostrar archivos adjuntos si existen
                        if (messageObj.photoUrls && Array.isArray(messageObj.photoUrls) && messageObj.photoUrls.length > 0) {
                            this.showAttachments(messageObj.photoUrls);
                        }
                    } else {
                        // Mensaje gen√©rico (fallback)
                        this.addOutputLine(messageObj.message || messageObj, 'text');
                    }
                });
            }
            
            // Mostrar mensaje de bienvenida despu√©s del historial
            this.updateWelcomeMessage(config.currentTheme);
            
        } catch (error) {
            console.error('Error al cargar historial:', error);
            this.addOutputLine('‚ö†Ô∏è No se pudo cargar el historial de conversaci√≥n', 'warning');
            this.addOutputLine('', 'text');
            
            // Mostrar mensaje de bienvenida
            this.updateWelcomeMessage(config.currentTheme);
        }
    }
    
    showAccessError() {
        // Deshabilitar input
        this.input.disabled = true;
        this.input.placeholder = 'Acceso denegado';
        
        // Ocultar cursor personalizado si existe
        if (this.cursor) {
            this.cursor.style.display = 'none';
        }
        
        // Limpiar output y mostrar mensaje de error
        this.output.innerHTML = '';
        
        const errorMessages = [
            'üö´ ERROR DE ACCESO AL DRON',
            '',
            '‚ùå Enlace inv√°lido o acceso denegado.',
            '',
            '‚ö†Ô∏è  Compruebe que su enlace sea correcto.',
            'üí° Contacte al administrador si necesita acceso.'
        ];
        
        errorMessages.forEach(line => {
            this.addOutputLine(line, 'error');
        });
        
        // Actualizar t√≠tulo
        const terminalTitle = document.getElementById('terminalTitle');
        if (terminalTitle) {
            terminalTitle.textContent = 'dron@access-denied:~';
        }
        
        console.error('üö´ Acceso denegado: URL no v√°lida');
    }
    
    setupDrone() {
        const currentCode = config.currentCode;
        const currentPartidaCode = config.currentPartidaCode;
        const currentTheme = config.currentTheme;
        const terminalTitle = document.getElementById('terminalTitle');
        
        // Actualizar t√≠tulo con c√≥digos
        const titleCode = currentCode ? `/${currentCode}` : '';
        const partidaCode = currentPartidaCode ? `/${currentPartidaCode}` : '';
        terminalTitle.textContent = `dron@johnson${titleCode}${partidaCode}:~`;
        
        // Aplicar clase CSS seg√∫n el tema
        if (currentTheme === 'red') {
            document.body.classList.add('drone-jackson');
            console.log('üöÅ Realidad Roja activada - C√≥digo 1623');
        } else {
            console.log('üöÅ Realidad Verde activada - C√≥digo 4815');
        }
        
        // El mensaje de bienvenida se mostrar√° despu√©s de cargar el historial
    }
    
    updateWelcomeMessage(theme) {
        const codeInfo = config.currentCode ? ` (C√≥digo: ${config.currentCode}` : '';
        const partidaInfo = config.currentPartidaCode ? `/${config.currentPartidaCode}` : '';
        const fullCodeInfo = codeInfo + partidaInfo + ')';
        
        const welcomeMessages = {
            green: `Bienvenido al Sistema de Control del Dron Johnson${fullCodeInfo}`,
            red: `¬°Bienvenido al Sistema de Control del Dron Johnson! üî•${fullCodeInfo}`
        };
        
        // Actualizar el primer mensaje de bienvenida
        const firstOutputLine = this.output.querySelector('.output-line');
        if (firstOutputLine) {
            const commandSpan = firstOutputLine.querySelector('.command');
            if (commandSpan) {
                commandSpan.textContent = welcomeMessages[theme];
            }
        }
    }
    
    handleKeyDown(e) {
        if (e.key === 'Enter') {
            this.executeCommand();
        } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            this.navigateHistory('up');
        } else if (e.key === 'ArrowDown') {
            e.preventDefault();
            this.navigateHistory('down');
        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'Home' || e.key === 'End') {
            // Actualizar posici√≥n del cursor despu√©s de mover el cursor nativo
            setTimeout(() => this.updateCursorPosition(), 0);
        }
    }
    
    async executeCommand() {
        const command = this.input.value.trim();
        if (command === '') return;

        // Deshabilitar input y mostrar animaci√≥n
        this.input.disabled = true;
        this.input.classList.add('waiting');
        this.showInputSpinner();

        // Agregar comando al historial
        this.commandHistory.push(command);
        this.historyIndex = this.commandHistory.length;

        // Mostrar comando ejecutado
        this.addOutputLine(`$ ${command}`, 'command-executed');

        // Ejecutar comando
        await this.processCommand(command);

        // Limpiar input
        this.input.value = '';

        // Habilitar input y quitar animaci√≥n
        this.input.disabled = false;
        this.input.classList.remove('waiting');
        this.hideInputSpinner();
        this.input.focus();

        // Scroll al final
        this.scrollToBottom();
    }
    
    async processCommand(command) {
        const parts = command.split(' ');
        const cmd = parts[0].toLowerCase();
        const args = parts.slice(1);
        
        // Comandos b√°sicos del sistema
        switch (cmd) {
            case 'help':
                this.showHelp();
                break;
            case 'clear':
                this.clear();
                break;
            case 'files':
                this.toggleFilesPanel();
                break;
            case 'exit':
            case 'quit':
                this.exitTerminal();
                break;
            // Comandos de entretenimiento (ocultos pero funcionales)
            case 'joke':
                this.tellJoke();
                break;
            case 'matrix':
                this.matrixEffect();
                break;
            case 'rainbow':
                this.rainbowText(args.join(' '));
                break;
            case 'ascii':
                this.showAsciiArt();
                break;
            case 'scroll':
                this.testScroll();
                break;
            case 'env':
                this.showEnvironment();
                break;
            case 'local':
                this.setLocalEnvironment();
                break;
            case 'production':
                this.setProductionEnvironment();
                break;
            case 'toggle':
                this.toggleEnvironment();
                break;
            default:
                // Cualquier otro comando se trata como instrucci√≥n para el LLM
                await this.processLLMCommand(command);
        }
    }
    
    showHelp() {
        const helpText = [
            'üöÅ Sistema de Control del Dron - Comandos B√°sicos:',
            '',
            'üîß Utilidades:',
            '  help      - Muestra esta ayuda',
            '  clear     - Limpia la terminal',
            '  files     - Abre panel de archivos',
            '',
            'üåç Configuraci√≥n de Entorno:',
            '  env         - Muestra configuraci√≥n actual',
            '  local       - Cambia a entorno local',
            '  production  - Cambia a entorno de producci√≥n',
            '  toggle      - Alterna entre entornos',
            '',
            'üí¨ Control por LLM:',
            '  Escribe instrucciones naturales como:',
            '  - "Toma una foto de la costa"',
            '  - "Graba un video del vuelo"',
            '  - "Escanea el terreno"',
            '  - "Muestra el estado del dron"',
            '',
            'üéØ Comandos especiales:',
            '  exit/quit - Salir del sistema',
            '',
            'üí° Tip: El dron responde a instrucciones en lenguaje natural'
        ];
        
        helpText.forEach(line => {
            this.addOutputLine(line, 'text');
        });
    }
    
    clear() {
        this.output.innerHTML = '';
    }
    
    showDate() {
        const now = new Date();
        const dateString = now.toLocaleString('es-ES', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        this.addOutputLine(dateString, 'text');
    }
    
    echo(text) {
        if (text) {
            this.addOutputLine(text, 'text');
        } else {
            this.addOutputLine('Uso: echo [texto]', 'warning');
        }
    }
    
    listFiles() {
        const files = [
            'üìÅ documentos/',
            'üìÅ imagenes/',
            'üìÅ musica/',
            'üìÑ README.md',
            'üìÑ package.json',
            'üìÑ index.html',
            'üìÑ styles.css',
            'üìÑ script.js'
        ];
        
        this.addOutputLine('Archivos en el directorio actual:', 'text');
        files.forEach(file => {
            this.addOutputLine(`  ${file}`, 'text');
        });
    }
    
    showCurrentDirectory() {
        this.addOutputLine('/home/terminal/web', 'text');
    }
    
    showUser() {
        this.addOutputLine('terminal', 'text');
    }
    
    showSystemInfo() {
        const systemInfo = [
            '‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ',
            '‚îÇ                Sistema de Control del Dron v1.0              ‚îÇ',
            '‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§',
            '‚îÇ OS: Drone Control System                                    ‚îÇ',
            '‚îÇ Kernel: LLM Processing Engine                               ‚îÇ',
            '‚îÇ Shell: Natural Language Interface                           ‚îÇ',
            '‚îÇ Terminal: Web-based                                         ‚îÇ',
            '‚îÇ CPU: AI Processing Unit                                     ‚îÇ',
            '‚îÇ Memory: Dynamic Allocation                                  ‚îÇ',
            '‚îÇ Storage: Cloud File System                                  ‚îÇ',
            '‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'
        ];
        
        systemInfo.forEach(line => {
            this.addOutputLine(line, 'text');
        });
    }
    
    addOutputLine(content, className = 'text') {
        const line = document.createElement('div');
        line.className = `output-line ${className}`;
        line.innerHTML = content;
        this.output.appendChild(line);
        
        // Solo hacer auto-scroll si el usuario est√° en la parte inferior
        if (this.autoScroll) {
            this.scrollToBottom();
        }
    }
    
    navigateHistory(direction) {
        if (this.commandHistory.length === 0) return;
        
        if (direction === 'up') {
            if (this.historyIndex > 0) {
                this.historyIndex--;
            }
        } else if (direction === 'down') {
            if (this.historyIndex < this.commandHistory.length - 1) {
                this.historyIndex++;
            } else {
                this.historyIndex = this.commandHistory.length;
                this.input.value = '';
                return;
            }
        }
        
        if (this.historyIndex >= 0 && this.historyIndex < this.commandHistory.length) {
            this.input.value = this.commandHistory[this.historyIndex];
        }
    }
    
    scrollToBottom() {
        // Forzar el scroll al final con un peque√±o delay para asegurar que el contenido se haya renderizado
        setTimeout(() => {
            this.output.scrollTop = this.output.scrollHeight;
        }, 10);
    }
    
    createCustomCursor() {
        // Crear elemento cursor personalizado
        this.cursor = document.createElement('span');
        this.cursor.className = 'custom-cursor';
        this.cursor.innerHTML = '‚ñà';
        
        // Color del cursor seg√∫n el dron
        const cursorColor = config.currentDrone === 'jackson' ? '#e74c3c' : '#27ca3f';
        
        this.cursor.style.cssText = `
            position: absolute;
            color: ${cursorColor};
            animation: blink 1s infinite;
            pointer-events: none;
            z-index: 10;
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            line-height: 1.5;
            vertical-align: baseline;
            display: inline-block;
        `;
        
        // Insertar el cursor en el input
        this.input.parentNode.style.position = 'relative';
        this.input.parentNode.appendChild(this.cursor);
        
        // Posici√≥n inicial del cursor con un peque√±o delay para asegurar que todo est√© renderizado
        setTimeout(() => this.updateCursorPosition(), 10);
    }
    
    updateCursorPosition() {
        if (!this.cursor) return;
        
        // Crear un span temporal para medir el texto
        const tempSpan = document.createElement('span');
        tempSpan.style.cssText = `
            position: absolute;
            visibility: hidden;
            white-space: pre;
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            color: #ffffff;
        `;
        tempSpan.textContent = this.input.value.substring(0, this.input.selectionStart);
        
        // Agregar temporalmente al DOM para medir
        this.input.parentNode.appendChild(tempSpan);
        const textWidth = tempSpan.offsetWidth;
        this.input.parentNode.removeChild(tempSpan);
        
        // Obtener la posici√≥n del input
        const inputRect = this.input.getBoundingClientRect();
        const parentRect = this.input.parentNode.getBoundingClientRect();
        
        // Calcular la posici√≥n relativa al padre
        const relativeLeft = inputRect.left - parentRect.left;
        
        // Posicionar el cursor
        this.cursor.style.left = (relativeLeft + textWidth) + 'px';
        
        // Alinear verticalmente con el texto del input
        const inputStyle = window.getComputedStyle(this.input);
        const inputLineHeight = parseFloat(inputStyle.lineHeight);
        const inputPaddingTop = parseFloat(inputStyle.paddingTop);
        const inputPaddingBottom = parseFloat(inputStyle.paddingBottom);
        
        // Calcular la posici√≥n vertical para alinear con la l√≠nea base del texto
        const textBaselineOffset = (inputLineHeight - 14) / 2; // 14px es el font-size
        this.cursor.style.top = (inputPaddingTop + textBaselineOffset) + 'px';
        
        // Debug: mostrar informaci√≥n en consola (opcional)
        // console.log('Cursor position:', textWidth, 'px from left, selection at:', this.input.selectionStart);
    }
    
    // M√©todo para permitir scroll manual
    enableManualScroll() {
        this.output.addEventListener('scroll', () => {
            // Si el usuario hace scroll manual, no auto-scrollear
            const isAtBottom = this.output.scrollTop + this.output.clientHeight >= this.output.scrollHeight - 10;
            this.autoScroll = isAtBottom;
        });
    }
    
    // M√©todo para probar el scroll
    testScroll() {
        this.addOutputLine('Generando contenido para probar el scroll...', 'text');
        this.addOutputLine('', 'text');
        
        // Generar mucho contenido para forzar el scroll
        for (let i = 1; i <= 150; i++) {
            this.addOutputLine(`L√≠nea ${i}: Contenido de prueba para verificar el scroll en modo full-screen.`, 'text');
        }
        
        this.addOutputLine('', 'text');
        this.addOutputLine('üîç VERIFICACI√ìN DEL SCROLL:', 'warning');
        this.addOutputLine('1. Mira el lado DERECHO de la terminal', 'text');
        this.addOutputLine('2. Deber√≠as ver una barra GRIS CLARA de 16px', 'text');
        this.addOutputLine('3. Usa la rueda del rat√≥n para hacer scroll', 'text');
        this.addOutputLine('4. Arrastra la barra de scroll para navegar', 'text');
        this.addOutputLine('', 'text');
        this.addOutputLine('‚úÖ Si ves la barra y puedes hacer scroll, ¬°todo funciona!', 'success');
    }
    
    // M√©todos adicionales para los comandos
    showTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('es-ES');
        this.addOutputLine(timeString, 'text');
    }
    
    showWeather() {
        this.addOutputLine('üå§Ô∏è  Clima: Soleado con nubes dispersas', 'text');
        this.addOutputLine('üå°Ô∏è  Temperatura: 22¬∞C', 'text');
        this.addOutputLine('üí®  Viento: 15 km/h', 'text');
        this.addOutputLine('üíß  Humedad: 65%', 'text');
    }
    
    tellJoke() {
        const jokes = [
            '¬øPor qu√© los programadores prefieren el fr√≠o? Porque odian los errores.',
            '¬øQu√© dice un programador cuando est√° atascado? "Funciona en mi m√°quina".',
            '¬øPor qu√© los programadores confunden Halloween y Navidad? Porque Oct 31 = Dec 25.',
            '¬øCu√°ntos programadores se necesitan para cambiar una bombilla? Ninguno, es un problema de hardware.',
            '¬øQu√© hace un programador en el gimnasio? Ejercicios de depuraci√≥n.',
            '¬øPor qu√© los programadores no salen al sol? Porque prefieren trabajar en la sombra.',
            '¬øQu√© le dice un programador a otro? "¬°Hola, mundo!"',
            '¬øPor qu√© los programadores son malos cocineros? Porque siempre siguen las recetas al pie de la letra.',
            '¬øCu√°l es el animal favorito de los programadores? El gato (porque tiene 9 vidas como los procesos).',
            '¬øPor qu√© los programadores prefieren el caf√©? Porque Java es su lenguaje favorito.'
        ];
        const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
        this.addOutputLine(randomJoke, 'text');
    }
    
    showFortune() {
        const fortunes = [
            'Un bug en la mano vale m√°s que mil en el c√≥digo.',
            'El c√≥digo limpio es como una buena historia.',
            'La paciencia es una virtud, especialmente en programaci√≥n.',
            'Hoy es un buen d√≠a para refactorizar.',
            'El mejor c√≥digo es el que no necesita comentarios.'
        ];
        const randomFortune = fortunes[Math.floor(Math.random() * fortunes.length)];
        this.addOutputLine(`üéØ ${randomFortune}`, 'text');
    }
    
    calculator(expression) {
        try {
            // Evaluar expresi√≥n matem√°tica de forma segura
            const result = eval(expression);
            this.addOutputLine(`${expression} = ${result}`, 'success');
        } catch (error) {
            this.addOutputLine('Error en la expresi√≥n matem√°tica', 'error');
        }
    }
    
    ping(host) {
        this.addOutputLine(`PING ${host} (127.0.0.1): 56 data bytes`, 'text');
        this.addOutputLine('64 bytes from 127.0.0.1: icmp_seq=1 time=0.123 ms', 'text');
        this.addOutputLine('64 bytes from 127.0.0.1: icmp_seq=2 time=0.098 ms', 'text');
        this.addOutputLine('64 bytes from 127.0.0.1: icmp_seq=3 time=0.145 ms', 'text');
        this.addOutputLine('', 'text');
        this.addOutputLine('--- 127.0.0.1 ping statistics ---', 'text');
        this.addOutputLine('3 packets transmitted, 3 received, 0% packet loss', 'success');
    }
    
    showUptime() {
        const uptime = Math.floor(Math.random() * 1000) + 100;
        const days = Math.floor(uptime / 24);
        const hours = uptime % 24;
        this.addOutputLine(`up ${days} days, ${hours} hours, 23 minutes`, 'text');
    }
    
    showProcesses() {
        this.addOutputLine('PID  TTY          TIME CMD', 'text');
        this.addOutputLine('1234 pts/0    00:00:01 bash', 'text');
        this.addOutputLine('1235 pts/0    00:00:00 node', 'text');
        this.addOutputLine('1236 pts/0    00:00:00 npm', 'text');
        this.addOutputLine('1237 pts/0    00:00:00 live-server', 'text');
    }
    
    showHistory() {
        if (this.commandHistory.length === 0) {
            this.addOutputLine('No hay comandos en el historial', 'text');
            return;
        }
        
        this.commandHistory.forEach((cmd, index) => {
            this.addOutputLine(`${index + 1}  ${cmd}`, 'text');
        });
    }
    
    catFile(filename) {
        if (!filename) {
            this.addOutputLine('Uso: cat [archivo]', 'warning');
            return;
        }
        
        const files = {
            'README.md': '# Terminal Web\n\nUna terminal web responsiva...',
            'package.json': '{\n  "name": "terminal-web",\n  "version": "1.0.0"\n}',
            'index.html': '<!DOCTYPE html>\n<html>\n<head>\n  <title>Terminal Web</title>\n</head>\n</html>'
        };
        
        if (files[filename]) {
            this.addOutputLine(files[filename], 'text');
        } else {
            this.addOutputLine(`cat: ${filename}: No existe el archivo`, 'error');
        }
    }
    
    touchFile(filename) {
        if (!filename) {
            this.addOutputLine('Uso: touch [archivo]', 'warning');
            return;
        }
        this.addOutputLine(`Archivo ${filename} creado`, 'success');
    }
    
    makeDirectory(dirname) {
        if (!dirname) {
            this.addOutputLine('Uso: mkdir [directorio]', 'warning');
            return;
        }
        this.addOutputLine(`Directorio ${dirname} creado`, 'success');
    }
    
    removeFile(filename) {
        if (!filename) {
            this.addOutputLine('Uso: rm [archivo]', 'warning');
            return;
        }
        this.addOutputLine(`Archivo ${filename} eliminado`, 'success');
    }
    
    moveFile(source, dest) {
        if (!source || !dest) {
            this.addOutputLine('Uso: mv [origen] [destino]', 'warning');
            return;
        }
        this.addOutputLine(`Archivo ${source} movido a ${dest}`, 'success');
    }
    
    copyFile(source, dest) {
        if (!source || !dest) {
            this.addOutputLine('Uso: cp [origen] [destino]', 'warning');
            return;
        }
        this.addOutputLine(`Archivo ${source} copiado a ${dest}`, 'success');
    }
    
    grepSearch(pattern) {
        if (!pattern) {
            this.addOutputLine('Uso: grep [patr√≥n]', 'warning');
            return;
        }
        this.addOutputLine(`Buscando "${pattern}" en archivos...`, 'text');
        this.addOutputLine('index.html:1:<!DOCTYPE html>', 'text');
        this.addOutputLine('script.js:1:class Terminal {', 'text');
    }
    
    findFiles(pattern) {
        if (!pattern) {
            this.addOutputLine('Uso: find [patr√≥n]', 'warning');
            return;
        }
        this.addOutputLine(`Buscando archivos con patr√≥n "${pattern}"...`, 'text');
        this.addOutputLine('./index.html', 'text');
        this.addOutputLine('./script.js', 'text');
        this.addOutputLine('./styles.css', 'text');
    }
    
    showDirectoryTree() {
        this.addOutputLine('.', 'text');
        this.addOutputLine('‚îú‚îÄ‚îÄ index.html', 'text');
        this.addOutputLine('‚îú‚îÄ‚îÄ styles.css', 'text');
        this.addOutputLine('‚îú‚îÄ‚îÄ script.js', 'text');
        this.addOutputLine('‚îú‚îÄ‚îÄ package.json', 'text');
        this.addOutputLine('‚îî‚îÄ‚îÄ README.md', 'text');
    }
    
    showDiskUsage() {
        this.addOutputLine('4.0K\t./index.html', 'text');
        this.addOutputLine('8.0K\t./styles.css', 'text');
        this.addOutputLine('12.0K\t./script.js', 'text');
        this.addOutputLine('2.0K\t./package.json', 'text');
        this.addOutputLine('6.0K\t./README.md', 'text');
        this.addOutputLine('32.0K\ttotal', 'text');
    }
    
    showDiskSpace() {
        this.addOutputLine('Filesystem     1K-blocks    Used Available Use% Mounted on', 'text');
        this.addOutputLine('/dev/sda1      104857600  52428800  52428800  50% /', 'text');
    }
    
    showMemoryUsage() {
        this.addOutputLine('              total        used        free      shared  buff/cache   available', 'text');
        this.addOutputLine('Mem:          16384        8192        4096        1024        4096        8192', 'text');
    }
    
    showSystemName() {
        this.addOutputLine('WebTerminal', 'text');
    }
    
    showHostname() {
        this.addOutputLine('terminal-web.local', 'text');
    }
    
    showWhoIsLoggedIn() {
        this.addOutputLine('USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT', 'text');
        this.addOutputLine('terminal pts/0    127.0.0.1        10:00    1:00   0.10s  0.05s -bash', 'text');
    }
    
    showLastLogins() {
        this.addOutputLine('terminal pts/0    127.0.0.1        Mon Oct 30 10:00   still logged in', 'text');
        this.addOutputLine('terminal pts/0    127.0.0.1        Sun Oct 29 15:30 - 18:45  (03:15)', 'text');
    }
    
    cowSay(text) {
        if (!text) text = 'Moo!';
        const cow = [
            ` ${text}`,
            '  < ' + '‚îÄ'.repeat(text.length) + ' >',
            '     \\   ^__^',
            '      \\  (oo)\\_______',
            '         (__)\\       )\\/\\',
            '             ||----w |',
            '             ||     ||'
        ];
        cow.forEach(line => this.addOutputLine(line, 'text'));
    }
    
    figlet(text) {
        if (!text) text = 'Hello';
        const figletText = [
            ' _    _      _ _         ',
            '| |  | |    | | |        ',
            '| |__| | ___| | | ___    ',
            '|  __  |/ _ \\ | |/ _ \\   ',
            '| |  | |  __/ | | (_) |  ',
            '|_|  |_|\\___|_|_|\\___/   '
        ];
        figletText.forEach(line => this.addOutputLine(line, 'text'));
    }
    
    banner(text) {
        if (!text) text = 'Hello';
        this.addOutputLine('*'.repeat(text.length + 4), 'text');
        this.addOutputLine(`* ${text} *`, 'text');
        this.addOutputLine('*'.repeat(text.length + 4), 'text');
    }
    
    matrixEffect() {
        this.addOutputLine('Iniciando efecto Matrix...', 'text');
        const matrixChars = '01„Ç¢„Ç§„Ç¶„Ç®„Ç™„Ç´„Ç≠„ÇØ„Ç±„Ç≥„Çµ„Ç∑„Çπ„Çª„ÇΩ„Çø„ÉÅ„ÉÑ„ÉÜ„Éà„Éä„Éã„Éå„Éç„Éé„Éè„Éí„Éï„Éò„Éõ„Éû„Éü„É†„É°„É¢„É§„É¶„É®„É©„É™„É´„É¨„É≠„ÉØ„É≤„É≥';
        for (let i = 0; i < 10; i++) {
            let line = '';
            for (let j = 0; j < 50; j++) {
                line += matrixChars[Math.floor(Math.random() * matrixChars.length)];
            }
            this.addOutputLine(line, 'success');
        }
    }
    
    rainbowText(text) {
        if (!text) text = 'Rainbow text!';
        const colors = ['#ff0000', '#ff7f00', '#ffff00', '#00ff00', '#0000ff', '#4b0082', '#9400d3'];
        let rainbowLine = '';
        for (let i = 0; i < text.length; i++) {
            const color = colors[i % colors.length];
            rainbowLine += `<span style="color: ${color}">${text[i]}</span>`;
        }
        this.addOutputLine(rainbowLine, 'text');
    }
    
    showAsciiArt() {
        const art = [
            '    ____  _       __    __     ',
            '   / __ \\(_)___  / /_  / /_  ___',
            '  / /_/ / / __ \\/ __ \\/ __ \\/ _ \\',
            ' / ____/ / /_/ / /_/ / /_/ /  __/',
            '/_/   /_/\\____/_.___/_.___/\\___/ ',
            '',
            'Terminal Web v1.0'
        ];
        art.forEach(line => this.addOutputLine(line, 'success'));
    }
    
    startGame(game) {
        if (!game) {
            this.addOutputLine('Juegos disponibles: snake, tetris, pong', 'text');
            return;
        }
        this.addOutputLine(`Iniciando ${game}... (Simulado)`, 'text');
        this.addOutputLine('Juego iniciado. Usa las flechas para jugar.', 'success');
    }
    
    exitTerminal() {
        this.addOutputLine('Cerrando terminal...', 'text');
        setTimeout(() => {
            this.addOutputLine('¬°Gracias por usar Terminal Web!', 'success');
        }, 1000);
    }
    
    // M√©todos para el panel de archivos
    initFilesPanel() {
        // Event listeners para el panel
        this.filesTab.addEventListener('click', () => this.toggleFilesPanel());
        this.closePanel.addEventListener('click', () => this.closeFilesPanel());
        
        // Cerrar panel con ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.filesPanel.classList.contains('open')) {
                this.closeFilesPanel();
            }
        });
        
        // Agregar archivos de ejemplo
        // this.addExampleFiles(); // Eliminado para que no se muestren archivos ficticios
    }
    
    addExampleFiles() {
        // Limpiar contenido inicial
        this.filesContent.innerHTML = '';
        
        // Agregar archivos de ejemplo
        this.addFileToPanel('foto_aerea_001.jpg', 'image', 'Foto a√©rea de la costa');
        this.addFileToPanel('grabacion_audio_001.mp3', 'audio', 'Grabaci√≥n de audio del dron');
        this.addFileToPanel('video_vuelo_001.mp4', 'video', 'Video del vuelo del dron');
        this.addFileToPanel('datos_telemetria.json', 'document', 'Datos de telemetr√≠a');
        this.addFileToPanel('mapa_terreno.png', 'image', 'Mapa del terreno escaneado');
    }
    
    toggleFilesPanel() {
        if (this.filesPanel.classList.contains('open')) {
            this.closeFilesPanel();
        } else {
            this.openFilesPanel();
        }
    }
    
    openFilesPanel() {
        this.filesPanel.classList.add('open');
        this.addOutputLine('Panel de archivos abierto', 'success');
    }
    
    closeFilesPanel() {
        this.filesPanel.classList.remove('open');
    }
    
    addFileToPanel(filename, type, description = '') {
        // Crear elemento de archivo
        const fileElement = document.createElement('div');
        fileElement.className = 'file-item';
        fileElement.innerHTML = `
            <div class="file-icon">${this.getFileIcon(type)}</div>
            <div class="file-info">
                <div class="file-name">${filename}</div>
                <div class="file-type">${type}</div>
                ${description ? `<div class="file-description">${description}</div>` : ''}
            </div>
            <div class="file-actions">
                <button class="view-file" onclick="terminal.viewFile('${filename}')" title="Ver archivo">üîç</button>
            </div>
        `;
        
        // Agregar al panel
        this.filesContent.appendChild(fileElement);
        
        // Remover mensaje de "no hay archivos" si existe
        const noFiles = this.filesContent.querySelector('.no-files');
        if (noFiles) {
            noFiles.remove();
        }
    }
    
    getFileIcon(type) {
        switch (type) {
            case 'image': return 'üñºÔ∏è';
            case 'audio': return 'üéµ';
            case 'video': return 'üé¨';
            case 'document': return 'üìÑ';
            default: return 'üìÅ';
        }
    }
    
    viewFile(filename) {
        this.addOutputLine(`Abriendo archivo: ${filename}`, 'text');
        // Aqu√≠ se abrir√≠a el archivo en una nueva pesta√±a
        window.open(`#${filename}`, '_blank');
    }
    
    downloadFile(filename) {
        this.addOutputLine(`Descargando archivo: ${filename}`, 'text');
        // Aqu√≠ se descargar√≠a el archivo
    }
    
    droneCommand(args) {
        if (args.length === 0) {
            this.addOutputLine('Uso: drone [comando]', 'warning');
            this.addOutputLine('Comandos disponibles: photo, video, audio, scan, status', 'text');
            return;
        }
        
        const subCommand = args[0].toLowerCase();
        
        switch (subCommand) {
            case 'photo':
                this.capturePhoto();
                break;
            case 'video':
                this.recordVideo();
                break;
            case 'audio':
                this.recordAudio();
                break;
            case 'scan':
                this.scanTerrain();
                break;
            case 'status':
                this.showDroneStatus();
                break;
            default:
                this.addOutputLine(`Comando de dron no reconocido: ${subCommand}`, 'error');
        }
    }
    
    capturePhoto() {
        this.addOutputLine('üöÅ Iniciando captura de foto a√©rea...', 'text');
        setTimeout(() => {
            this.addOutputLine('üì∏ Foto capturada exitosamente', 'success');
            const filename = `foto_aerea_${Date.now()}.jpg`;
            this.addFileToPanel(filename, 'image', 'Foto a√©rea capturada por el dron');
            this.addOutputLine(`Archivo guardado: ${filename}`, 'text');
        }, 2000);
    }
    
    recordVideo() {
        this.addOutputLine('üöÅ Iniciando grabaci√≥n de video...', 'text');
        setTimeout(() => {
            this.addOutputLine('üé¨ Video grabado exitosamente', 'success');
            const filename = `video_vuelo_${Date.now()}.mp4`;
            this.addFileToPanel(filename, 'video', 'Video del vuelo del dron');
            this.addOutputLine(`Archivo guardado: ${filename}`, 'text');
        }, 3000);
    }
    
    recordAudio() {
        this.addOutputLine('üöÅ Iniciando grabaci√≥n de audio...', 'text');
        setTimeout(() => {
            this.addOutputLine('üéµ Audio grabado exitosamente', 'success');
            const filename = `audio_ambiental_${Date.now()}.mp3`;
            this.addFileToPanel(filename, 'audio', 'Grabaci√≥n de audio ambiental');
            this.addOutputLine(`Archivo guardado: ${filename}`, 'text');
        }, 2500);
    }
    
    scanTerrain() {
        this.addOutputLine('üöÅ Iniciando escaneo del terreno...', 'text');
        setTimeout(() => {
            this.addOutputLine('üó∫Ô∏è Terreno escaneado exitosamente', 'success');
            const filename = `mapa_terreno_${Date.now()}.png`;
            this.addFileToPanel(filename, 'image', 'Mapa del terreno escaneado');
            this.addOutputLine(`Archivo guardado: ${filename}`, 'text');
        }, 4000);
    }
    
    showDroneStatus() {
        const status = [
            'üöÅ Estado del Dron:',
            '  Bater√≠a: 87%',
            '  Altitud: 120m',
            '  Velocidad: 15 km/h',
            '  GPS: Conectado',
            '  C√°mara: Activa',
            '  Temperatura: 23¬∞C',
            '  Viento: 8 km/h',
            '  Tiempo de vuelo: 45 min'
        ];
        
        status.forEach(line => {
            this.addOutputLine(line, 'text');
        });
    }
    
    showEnvironment() {
        const droneName = config.currentDrone === 'jackson' ? 'Jackson' : 'Johnson';
        const codeInfo = config.currentCode ? `  C√≥digo: ${config.currentCode}` : '  C√≥digo: No especificado';
        const partidaInfo = config.currentPartidaCode ? `/${config.currentPartidaCode}` : '';
        const fullCodeInfo = codeInfo + partidaInfo;
        
        const envInfo = [
            'üîß Configuraci√≥n del Entorno:',
            `  Dron: ${droneName}`,
            fullCodeInfo,
            `  Entorno: ${config.isDevelopment ? 'Desarrollo (Local)' : 'Producci√≥n'}`,
            `  API URL: ${config.DRONE_API_URL}`,
            `  Init URL: ${config.INIT_API_URL}`,
            '',
            'üìã Comandos de entorno:',
            '  env         - Muestra esta informaci√≥n',
            '  local       - Cambia a entorno local',
            '  production  - Cambia a entorno de producci√≥n',
            '  toggle      - Alterna entre entornos'
        ];
        
        envInfo.forEach(line => {
            this.addOutputLine(line, 'text');
        });
    }
    
    setLocalEnvironment() {
        config.setEnvironment('local');
        this.addOutputLine('‚úÖ Entorno cambiado a: Local', 'success');
        this.addOutputLine(`üì° API URL: ${config.DRONE_API_URL}`, 'text');
    }
    
    setProductionEnvironment() {
        config.setEnvironment('production');
        this.addOutputLine('‚úÖ Entorno cambiado a: Producci√≥n', 'success');
        this.addOutputLine(`üì° API URL: ${config.DRONE_API_URL}`, 'text');
    }
    
    toggleEnvironment() {
        config.toggleEnvironment();
        const envName = config.isDevelopment ? 'Local' : 'Producci√≥n';
        this.addOutputLine(`üîÑ Entorno alternado a: ${envName}`, 'success');
        this.addOutputLine(`üì° API URL: ${config.DRONE_API_URL}`, 'text');
    }
    
    // Fetch con timeout
    async fetchWithTimeout(resource, options = {}, timeout = 20000) {
        return Promise.race([
            fetch(resource, options),
            new Promise((_, reject) =>
                setTimeout(() => reject(new Error('timeout')), timeout)
            )
        ]);
    }

    async processLLMCommand(command) {
        try {
            // Preparar datos para enviar a la API
            const requestData = {
                message: command,
                drone: 'johnson' // Siempre usar Johnson
            };
            // Agregar c√≥digo de partida si est√° disponible (mantiene compatibilidad)
            if (config.currentPartidaCode) {
                requestData.code = config.currentPartidaCode;
            }
            // Agregar versi√≥n (c√≥digo de acceso) si est√° disponible
            if (config.currentCode) {
                requestData.version = config.currentCode;
            }

            // Usar fetch con timeout de 20 segundos
            const response = await this.fetchWithTimeout(config.DRONE_API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            }, 20000);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            // Mostrar solo la respuesta del dron
            if (data.message) {
                this.addOutputLine(`üöÅ Dron Johnson:`, 'drone-response');
                this.addOutputLine(data.message, 'drone-message');
                // Mostrar archivos adjuntos si existen
                if (data.photoUrls && Array.isArray(data.photoUrls) && data.photoUrls.length > 0) {
                    this.showAttachments(data.photoUrls);
                }
            } else {
                this.addOutputLine('‚ùå Error: No se recibi√≥ respuesta del dron', 'error');
            }

        } catch (error) {
            if (error.message === 'timeout') {
                this.addOutputLine('‚ùå Tiempo de espera agotado. Intenta de nuevo.', 'error');
            } else {
                console.error('Error al llamar a la API:', error);
                this.addOutputLine('‚ùå Error de conexi√≥n con el dron', 'error');
            }
        }
    }
    
    showAttachments(photoUrls) {
        if (!photoUrls || photoUrls.length === 0) return;
        
        // Crear enlaces para cada archivo adjunto
        const attachments = photoUrls.map((url, index) => {
            const fileName = this.getFileNameFromUrl(url);
            return `<a href="${url}" target="_blank" class="attachment-link">${fileName}</a>`;
        }).join(', ');
        
        // Mostrar l√≠nea de archivos adjuntos
        this.addOutputLine(`üìé Ficheros adjuntos: ${attachments}`, 'attachments');
        
        // Agregar archivos a la zona de archivos
        this.addFilesToPanel(photoUrls);
    }
    
    getFileNameFromUrl(url) {
        try {
            // Extraer nombre del archivo de la URL
            const urlParts = url.split('/');
            const fileName = urlParts[urlParts.length - 1];
            
            // Si no hay nombre de archivo, usar un nombre gen√©rico
            if (!fileName || fileName.includes('?')) {
                return `archivo_${Date.now()}`;
            }
            
            return fileName;
        } catch (error) {
            return `archivo_${Date.now()}`;
        }
    }
    
    addFilesToPanel(photoUrls) {
        if (!photoUrls || photoUrls.length === 0) return;
        
        const filesContent = document.getElementById('filesContent');
        const noFilesDiv = filesContent.querySelector('.no-files');
        
        // Remover mensaje de "no hay archivos" si existe
        if (noFilesDiv) {
            noFilesDiv.remove();
        }
        
        photoUrls.forEach(url => {
            const fileName = this.getFileNameFromUrl(url);
            
            // Verificar si el archivo ya existe
            const existingFile = filesContent.querySelector(`[data-url="${url}"]`);
            if (existingFile) {
                return; // Archivo ya existe, no agregar
            }
            
            // Crear elemento del archivo
            const fileElement = document.createElement('div');
            fileElement.className = 'file-item';
            fileElement.setAttribute('data-url', url);
            
            // Determinar icono seg√∫n extensi√≥n
            const fileIcon = this.getFileIcon(fileName);
            
            fileElement.innerHTML = `
                <div class="file-icon">${fileIcon}</div>
                <div class="file-info">
                    <div class="file-name">${fileName}</div>
                    <div class="file-url">${url}</div>
                </div>
                <div class="file-actions">
                    <a href="${url}" target="_blank" class="file-download" title="Abrir archivo">
                        <span>üì§</span>
                    </a>
                </div>
            `;
            
            // Agregar al final de la lista
            filesContent.appendChild(fileElement);
        });
    }
    
    getFileIcon(fileName) {
        const extension = fileName.split('.').pop()?.toLowerCase();
        
        switch (extension) {
            case 'jpg':
            case 'jpeg':
            case 'png':
            case 'gif':
            case 'webp':
                return 'üñºÔ∏è';
            case 'pdf':
                return 'üìÑ';
            case 'doc':
            case 'docx':
                return 'üìù';
            case 'xls':
            case 'xlsx':
                return 'üìä';
            case 'txt':
                return 'üìÉ';
            case 'zip':
            case 'rar':
            case '7z':
                return 'üì¶';
            case 'mp4':
            case 'avi':
            case 'mov':
                return 'üé•';
            case 'mp3':
            case 'wav':
            case 'ogg':
                return 'üéµ';
            default:
                return 'üìé';
        }
    }
    
    clearFilesPanel() {
        const filesContent = document.getElementById('filesContent');
        
        // Limpiar todo el contenido
        filesContent.innerHTML = `
            <div class="no-files">
                <p>üìÅ No hay archivos descargados</p>
                <p>Usa comandos del dron para capturar contenido</p>
            </div>
        `;
    }

    showInputSpinner() {
        // Evitar duplicados
        if (document.getElementById('terminalInputSpinner')) return;
        const spinner = document.createElement('span');
        spinner.id = 'terminalInputSpinner';
        spinner.className = 'terminal-input-spinner';
        // Insertar despu√©s del input
        this.input.parentNode.appendChild(spinner);
    }

    hideInputSpinner() {
        const spinner = document.getElementById('terminalInputSpinner');
        if (spinner) spinner.remove();
    }
}

import config from './config.js';

// Inicializar terminal cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', () => {
    window.terminal = new Terminal();
    window.config = config; // Hacer config disponible globalmente
});

// Mantener el foco en el input cuando se hace clic en cualquier parte
document.addEventListener('click', () => {
    document.getElementById('terminalInput').focus();
}); 